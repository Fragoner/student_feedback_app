{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/app/_components/post.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LatestPost = registerClientReference(\n    function() { throw new Error(\"Attempted to call LatestPost() from the server but LatestPost is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/_components/post.tsx <module evaluation>\",\n    \"LatestPost\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,8DACA","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/app/_components/post.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LatestPost = registerClientReference(\n    function() { throw new Error(\"Attempted to call LatestPost() from the server but LatestPost is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/_components/post.tsx\",\n    \"LatestPost\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,0CACA","debugId":null}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    AUTH_SECRET:\n      process.env.NODE_ENV === \"production\"\n        ? z.string()\n        : z.string().optional(),\n    DATABASE_URL: z.string().url(),\n    GEMINI_API_KEY: z.string(), // ✅ Add this\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  runtimeEnv: {\n    AUTH_SECRET: process.env.AUTH_SECRET,\n    DATABASE_URL: process.env.DATABASE_URL,\n    GEMINI_API_KEY: process.env.GEMINI_API_KEY, // ✅ Add this\n    NODE_ENV: process.env.NODE_ENV,\n  },\n\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,aACE,6EAEI,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;QACzB,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM;QACxB,UAAU,oIAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA,QAAQ;IAER;IAEA,YAAY;QACV,aAAa,QAAQ,GAAG,CAAC,WAAW;QACpC,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,gBAAgB,QAAQ,GAAG,CAAC,cAAc;QAC1C,QAAQ;IACV;IAEA,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"~/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/server/auth/config.ts"],"sourcesContent":["import { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { type DefaultSession, type NextAuthConfig } from \"next-auth\";\nimport DiscordProvider from \"next-auth/providers/discord\";\n\nimport { db } from \"~/server/db\";\n\n/**\n * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`\n * object and keep type safety.\n *\n * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n */\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n      // ...other properties\n      // role: UserRole;\n    } & DefaultSession[\"user\"];\n  }\n\n  // interface User {\n  //   // ...other properties\n  //   // role: UserRole;\n  // }\n}\n\n/**\n * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n *\n * @see https://next-auth.js.org/configuration/options\n */\nexport const authConfig = {\n  providers: [\n    DiscordProvider,\n    /**\n     * ...add more providers here.\n     *\n     * Most other providers require a bit more work than the Discord provider. For example, the\n     * GitHub provider requires you to add the `refresh_token_expires_in` field to the Account\n     * model. Refer to the NextAuth.js docs for the provider you want to use. Example:\n     *\n     * @see https://next-auth.js.org/providers/github\n     */\n  ],\n  adapter: PrismaAdapter(db),\n  callbacks: {\n    session: ({ session, user }) => ({\n      ...session,\n      user: {\n        ...session.user,\n        id: user.id,\n      },\n    }),\n  },\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;AAAA;AAEA;AAAA;AAEA;;;;AA4BO,MAAM,aAAa;IACxB,WAAW;QACT,sLAAA,CAAA,UAAe;KAUhB;IACD,SAAS,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EAAE,mHAAA,CAAA,KAAE;IACzB,WAAW;QACT,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAK,CAAC;gBAC/B,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,KAAK,EAAE;gBACb;YACF,CAAC;IACH;AACF","debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/server/auth/index.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { cache } from \"react\";\n\nimport { authConfig } from \"./config\";\n\nconst { auth: uncachedAuth, handlers, signIn, signOut } = NextAuth(authConfig);\n\nconst auth = cache(uncachedAuth);\n\nexport { auth, handlers, signIn, signOut };\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAEA;;;;AAEA,MAAM,EAAE,MAAM,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE,+HAAA,CAAA,aAAU;AAE7E,MAAM,OAAO,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\n\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { auth } from \"~/server/auth\";\nimport { db } from \"~/server/db\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  const session = await auth();\n\n  return {\n    db,\n    session,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n\n/**\n * Protected (authenticated) procedure\n *\n * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies\n * the session is valid and guarantees `ctx.session.user` is not null.\n *\n * @see https://trpc.io/docs/procedures\n */\nexport const protectedProcedure = t.procedure\n  .use(timingMiddleware)\n  .use(({ ctx, next }) => {\n    if (!ctx.session?.user) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n    return next({\n      ctx: {\n        // infers the `session` as non-nullable\n        session: { ...ctx.session, user: ctx.session.user },\n      },\n    });\n  });\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AAED;AAAA;AAAA;AACA;AACA;AAEA;AACA;;;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,MAAM,UAAU,MAAM,CAAA,GAAA,8HAAA,CAAA,OAAI,AAAD;IAEzB,OAAO;QACL,IAAA,mHAAA,CAAA,KAAE;QACF;QACA,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,gMAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,0IAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,oIAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AAUxC,MAAM,qBAAqB,EAAE,SAAS,CAC1C,GAAG,CAAC,kBACJ,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE;IACjB,IAAI,CAAC,IAAI,OAAO,EAAE,MAAM;QACtB,MAAM,IAAI,0MAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAe;IAC7C;IACA,OAAO,KAAK;QACV,KAAK;YACH,uCAAuC;YACvC,SAAS;gBAAE,GAAG,IAAI,OAAO;gBAAE,MAAM,IAAI,OAAO,CAAC,IAAI;YAAC;QACpD;IACF;AACF","debugId":null}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/server/api/routers/student.ts"],"sourcesContent":["import { z } from \"zod\";\r\nimport { createTRPCRouter, protectedProcedure } from \"~/server/api/trpc\";\r\n\r\n// Define input validation schemas using Zod\r\nconst createStudentSchema = z.object({\r\n  name: z.string().min(1, \"Name is required\"),\r\n  studentId: z.string().min(1, \"Student ID is required\"),\r\n  grade: z.string().min(1, \"Grade is required\"),\r\n});\r\n\r\nconst updateStudentSchema = createStudentSchema.partial().extend({\r\n  id: z.string().min(1, \"Student ID is required\"),\r\n});\r\n\r\nexport const studentRouter = createTRPCRouter({\r\n  // Get all students\r\n  getAll: protectedProcedure.query(async ({ ctx }) => {\r\n    return await ctx.db.student.findMany({\r\n      include: {\r\n        subjects: {\r\n          include: {\r\n            grades: true,\r\n          },\r\n        },\r\n        attendance: true,\r\n        behavioralNotes: true,\r\n        feedbackHistory: true,\r\n      },\r\n    });\r\n  }),\r\n\r\n  // Get a single student by ID\r\n  getById: protectedProcedure\r\n    .input(z.object({ id: z.string() }))\r\n    .query(async ({ ctx, input }) => {\r\n      return await ctx.db.student.findUnique({\r\n        where: { id: input.id },\r\n        include: {\r\n          subjects: {\r\n            include: {\r\n              grades: true,\r\n            },\r\n          },\r\n          attendance: true,\r\n          behavioralNotes: true,\r\n          feedbackHistory: true,\r\n        },\r\n      });\r\n    }),\r\n\r\n  // Create a new student\r\n  create: protectedProcedure\r\n    .input(createStudentSchema)\r\n    .mutation(async ({ ctx, input }) => {\r\n      return await ctx.db.student.create({\r\n        data: {\r\n          name: input.name,\r\n          studentId: input.studentId,\r\n          grade: input.grade,\r\n          attendance: {\r\n            create: {\r\n              present: 0,\r\n              absent: 0,\r\n              late: 0,\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }),\r\n\r\n  // Update an existing student\r\n  update: protectedProcedure\r\n    .input(updateStudentSchema)\r\n    .mutation(async ({ ctx, input }) => {\r\n      const { id, ...data } = input;\r\n      return await ctx.db.student.update({\r\n        where: { id },\r\n        data,\r\n      });\r\n    }),\r\n\r\n  // Delete a student\r\n  delete: protectedProcedure\r\n    .input(z.object({ id: z.string() }))\r\n    .mutation(async ({ ctx, input }) => {\r\n      return await ctx.db.student.delete({\r\n        where: { id: input.id },\r\n      });\r\n    }),\r\n\r\n  // Add a subject to a student\r\n  addSubject: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        studentId: z.string(),\r\n        name: z.string(),\r\n        performance: z.string().optional(),\r\n      })\r\n    )\r\n    .mutation(async ({ ctx, input }) => {\r\n      return await ctx.db.subject.create({\r\n        data: {\r\n          name: input.name,\r\n          performance: input.performance,\r\n          student: {\r\n            connect: { id: input.studentId },\r\n          },\r\n        },\r\n      });\r\n    }),\r\n\r\n  // Add a grade to a subject\r\n  addGrade: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        subjectId: z.string(),\r\n        value: z.number(),\r\n      })\r\n    )\r\n    .mutation(async ({ ctx, input }) => {\r\n      return await ctx.db.grade.create({\r\n        data: {\r\n          value: input.value,\r\n          subject: {\r\n            connect: { id: input.subjectId },\r\n          },\r\n        },\r\n      });\r\n    }),\r\n\r\n  // Update attendance record\r\n  updateAttendance: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        studentId: z.string(),\r\n        present: z.number().optional(),\r\n        absent: z.number().optional(),\r\n        late: z.number().optional(),\r\n      })\r\n    )\r\n    .mutation(async ({ ctx, input }) => {\r\n      const { studentId, ...attendanceData } = input;\r\n      return await ctx.db.attendance.upsert({\r\n        where: { studentId },\r\n        update: attendanceData,\r\n        create: {\r\n          ...attendanceData,\r\n          student: {\r\n            connect: { id: studentId },\r\n          },\r\n        },\r\n      });\r\n    }),\r\n\r\n  // Add a behavioral note\r\n  addBehavioralNote: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        studentId: z.string(),\r\n        content: z.string(),\r\n      })\r\n    )\r\n    .mutation(async ({ ctx, input }) => {\r\n      return await ctx.db.behavioralNote.create({\r\n        data: {\r\n          content: input.content,\r\n          student: {\r\n            connect: { id: input.studentId },\r\n          },\r\n        },\r\n      });\r\n    }),\r\n\r\n  // Export student data to CSV/XLSX format (returns formatted data)\r\n  exportStudentData: protectedProcedure\r\n    .input(z.object({ id: z.string() }))\r\n    .query(async ({ ctx, input }) => {\r\n      const student = await ctx.db.student.findUnique({\r\n        where: { id: input.id },\r\n        include: {\r\n          subjects: {\r\n            include: {\r\n              grades: true,\r\n            },\r\n          },\r\n          attendance: true,\r\n          behavioralNotes: true,\r\n          feedbackHistory: true,\r\n        },\r\n      });\r\n\r\n      if (!student) {\r\n        throw new Error(\"Student not found\");\r\n      }\r\n\r\n      // Format data for export\r\n      // This will be used by the Gemini API\r\n      const exportData = {\r\n        name: student.name,\r\n        studentId: student.studentId,\r\n        grade: student.grade,\r\n        subjects: student.subjects.map((subject) => ({\r\n          name: subject.name,\r\n          performance: subject.performance,\r\n          averageGrade: subject.grades.length\r\n            ? subject.grades.reduce((sum, grade) => sum + grade.value, 0) /\r\n              subject.grades.length\r\n            : null,\r\n        })),\r\n        attendance: student.attendance,\r\n        behavioralNotes: student.behavioralNotes.map((note) => note.content),\r\n      };\r\n\r\n      return exportData;\r\n    }),\r\n});"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/utils/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Types for the student data and feedback options\r\ntype Subject = {\r\n  name: string;\r\n  performance: string;\r\n  grades: number[];\r\n  average: number | string;\r\n};\r\n\r\ntype Attendance = {\r\n  present: number;\r\n  absent: number;\r\n  late: number;\r\n  attendanceRate: number;\r\n};\r\n\r\ntype StudentData = {\r\n  name: string;\r\n  studentId: string;\r\n  grade: string;\r\n  subjects: Subject[];\r\n  attendance: Attendance | string;\r\n  behavioralNotes: string[];\r\n};\r\n\r\ntype FeedbackType = \"improvement\" | \"strengths\" | \"parentConference\";\r\n\r\n// Get Gemini API key from environment variables\r\nconst apiKey = process.env.GEMINI_API_KEY;\r\n\r\nif (!apiKey) {\r\n  throw new Error(\"GEMINI_API_KEY is not defined in environment variables\");\r\n}\r\n\r\n// Initialize Gemini API\r\nconst genAI = new GoogleGenerativeAI(apiKey);\r\n\r\n// Function to generate feedback based on student data\r\nexport async function generateFeedback(\r\n  studentData: StudentData,\r\n  feedbackType: FeedbackType\r\n): Promise<string> {\r\n  try {\r\n    // Get the appropriate prompt template\r\n    const promptTemplate = getPromptTemplate(feedbackType);\r\n\r\n    // Format the prompt with student data\r\n    const formattedPrompt = formatPrompt(promptTemplate, studentData);\r\n\r\n    // Call Gemini API\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n    const result = await model.generateContent({\r\n      contents: [{ role: \"user\", parts: [{ text: formattedPrompt }] }],\r\n    });\r\n\r\n    // Return the generated text\r\n    return result.response.text();\r\n  } catch (error) {\r\n    console.error(\"Error generating feedback:\", error);\r\n    throw new Error(\"Failed to generate feedback\");\r\n  }\r\n}\r\n\r\n// Get the appropriate prompt template based on feedback type\r\nfunction getPromptTemplate(feedbackType: FeedbackType): string {\r\n  const templates = {\r\n    improvement: `\r\n      Based on the student data provided, generate specific areas for improvement for {{name}}. \r\n      The student is in grade {{grade}}.\r\n      \r\n      Academic Information:\r\n      {{subjectsData}}\r\n      \r\n      Attendance Information:\r\n      {{attendanceData}}\r\n      \r\n      Behavioral Notes:\r\n      {{behavioralNotes}}\r\n      \r\n      Please provide specific, actionable feedback that focuses on areas where the student \r\n      can improve. Include specific strategies that would be helpful for the student to implement.\r\n      Format the response in a professional but warm tone that would be appropriate for a teacher \r\n      to share with a student or parent.\r\n    `,\r\n    strengths: `\r\n      Based on the student data provided, highlight the strengths and positive attributes of {{name}}.\r\n      The student is in grade {{grade}}.\r\n      \r\n      Academic Information:\r\n      {{subjectsData}}\r\n      \r\n      Attendance Information:\r\n      {{attendanceData}}\r\n      \r\n      Behavioral Notes:\r\n      {{behavioralNotes}}\r\n      \r\n      Please provide specific feedback that focuses on the student's strengths and achievements.\r\n      Highlight areas where the student excels and provide encouragement.\r\n      Format the response in a professional but warm tone that would be appropriate for a teacher \r\n      to share with a student or parent.\r\n    `,\r\n    parentConference: `\r\n      Based on the student data provided, prepare talking points for a parent-teacher conference for {{name}}.\r\n      The student is in grade {{grade}}.\r\n      \r\n      Academic Information:\r\n      {{subjectsData}}\r\n      \r\n      Attendance Information:\r\n      {{attendanceData}}\r\n      \r\n      Behavioral Notes:\r\n      {{behavioralNotes}}\r\n      \r\n      Please provide comprehensive talking points that cover both strengths and areas for improvement.\r\n      Include specific examples from the data. Suggest strategies that could be implemented at home to support the student.\r\n      Format the response in a professional but warm tone that would be appropriate for a teacher \r\n      to discuss with parents during a conference.\r\n    `,\r\n  };\r\n\r\n  return templates[feedbackType];\r\n}\r\n\r\n// Format the prompt with student data\r\nfunction formatPrompt(template: string, studentData: StudentData): string {\r\n  let formattedPrompt = template\r\n    .replace(\"{{name}}\", studentData.name)\r\n    .replace(\"{{grade}}\", studentData.grade);\r\n\r\n  // Format subjects data\r\n  let subjectsText = \"\";\r\n  studentData.subjects.forEach((subject) => {\r\n    subjectsText += `- ${subject.name}: Performance ${subject.performance}, `;\r\n    subjectsText += `Grades: ${subject.grades.join(\", \")}, `;\r\n    subjectsText += `Average: ${subject.average}\\n`;\r\n  });\r\n  formattedPrompt = formattedPrompt.replace(\"{{subjectsData}}\", subjectsText);\r\n\r\n  // Format attendance data\r\n  let attendanceText = \"\";\r\n  if (typeof studentData.attendance === \"string\") {\r\n    attendanceText = studentData.attendance;\r\n  } else {\r\n    attendanceText = `Present: ${studentData.attendance.present} days, `;\r\n    attendanceText += `Absent: ${studentData.attendance.absent} days, `;\r\n    attendanceText += `Late: ${studentData.attendance.late} days, `;\r\n    attendanceText += `Attendance Rate: ${Math.round(\r\n      studentData.attendance.attendanceRate * 100\r\n    )}%`;\r\n  }\r\n  formattedPrompt = formattedPrompt.replace(\"{{attendanceData}}\", attendanceText);\r\n\r\n  // Format behavioral notes\r\n  const behavioralText = studentData.behavioralNotes.length\r\n    ? studentData.behavioralNotes.map((note) => `- ${note}`).join(\"\\n\")\r\n    : \"No behavioral notes recorded.\";\r\n  formattedPrompt = formattedPrompt.replace(\r\n    \"{{behavioralNotes}}\",\r\n    behavioralText\r\n  );\r\n\r\n  return formattedPrompt;\r\n}"],"names":[],"mappings":";;;AAAA;;AA4BA,gDAAgD;AAChD,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;AAEzC,IAAI,CAAC,QAAQ;IACX,MAAM,IAAI,MAAM;AAClB;AAEA,wBAAwB;AACxB,MAAM,QAAQ,IAAI,8JAAA,CAAA,qBAAkB,CAAC;AAG9B,eAAe,iBACpB,WAAwB,EACxB,YAA0B;IAE1B,IAAI;QACF,sCAAsC;QACtC,MAAM,iBAAiB,kBAAkB;QAEzC,sCAAsC;QACtC,MAAM,kBAAkB,aAAa,gBAAgB;QAErD,kBAAkB;QAClB,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAa;QAC7D,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;YACzC,UAAU;gBAAC;oBAAE,MAAM;oBAAQ,OAAO;wBAAC;4BAAE,MAAM;wBAAgB;qBAAE;gBAAC;aAAE;QAClE;QAEA,4BAA4B;QAC5B,OAAO,OAAO,QAAQ,CAAC,IAAI;IAC7B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM,IAAI,MAAM;IAClB;AACF;AAEA,6DAA6D;AAC7D,SAAS,kBAAkB,YAA0B;IACnD,MAAM,YAAY;QAChB,aAAa,CAAC;;;;;;;;;;;;;;;;;IAiBd,CAAC;QACD,WAAW,CAAC;;;;;;;;;;;;;;;;;IAiBZ,CAAC;QACD,kBAAkB,CAAC;;;;;;;;;;;;;;;;;IAiBnB,CAAC;IACH;IAEA,OAAO,SAAS,CAAC,aAAa;AAChC;AAEA,sCAAsC;AACtC,SAAS,aAAa,QAAgB,EAAE,WAAwB;IAC9D,IAAI,kBAAkB,SACnB,OAAO,CAAC,YAAY,YAAY,IAAI,EACpC,OAAO,CAAC,aAAa,YAAY,KAAK;IAEzC,uBAAuB;IACvB,IAAI,eAAe;IACnB,YAAY,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5B,gBAAgB,CAAC,EAAE,EAAE,QAAQ,IAAI,CAAC,cAAc,EAAE,QAAQ,WAAW,CAAC,EAAE,CAAC;QACzE,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACxD,gBAAgB,CAAC,SAAS,EAAE,QAAQ,OAAO,CAAC,EAAE,CAAC;IACjD;IACA,kBAAkB,gBAAgB,OAAO,CAAC,oBAAoB;IAE9D,yBAAyB;IACzB,IAAI,iBAAiB;IACrB,IAAI,OAAO,YAAY,UAAU,KAAK,UAAU;QAC9C,iBAAiB,YAAY,UAAU;IACzC,OAAO;QACL,iBAAiB,CAAC,SAAS,EAAE,YAAY,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC;QACpE,kBAAkB,CAAC,QAAQ,EAAE,YAAY,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC;QACnE,kBAAkB,CAAC,MAAM,EAAE,YAAY,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;QAC/D,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,KAAK,CAC9C,YAAY,UAAU,CAAC,cAAc,GAAG,KACxC,CAAC,CAAC;IACN;IACA,kBAAkB,gBAAgB,OAAO,CAAC,sBAAsB;IAEhE,0BAA0B;IAC1B,MAAM,iBAAiB,YAAY,eAAe,CAAC,MAAM,GACrD,YAAY,eAAe,CAAC,GAAG,CAAC,CAAC,OAAS,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,QAC5D;IACJ,kBAAkB,gBAAgB,OAAO,CACvC,uBACA;IAGF,OAAO;AACT","debugId":null}},
    {"offset": {"line": 664, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/server/api/routers/feedback.ts"],"sourcesContent":["import { z } from \"zod\";\r\nimport { createTRPCRouter, protectedProcedure } from \"~/server/api/trpc\";\r\nimport { generateFeedback } from \"~/utils/geminiService\";\r\n\r\nexport const feedbackRouter = createTRPCRouter({\r\n  // Generate feedback using Gemini API\r\n  generateFeedback: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        studentId: z.string(),\r\n        feedbackType: z.enum([\r\n          \"improvement\",\r\n          \"strengths\",\r\n          \"parentConference\",\r\n        ]),\r\n      })\r\n    )\r\n    .mutation(async ({ ctx, input }) => {\r\n      // 1. Get student data\r\n      const studentData = await ctx.db.student.findUnique({\r\n        where: { id: input.studentId },\r\n        include: {\r\n          subjects: {\r\n            include: {\r\n              grades: true,\r\n            },\r\n          },\r\n          attendance: true,\r\n          behavioralNotes: true,\r\n        },\r\n      });\r\n\r\n      if (!studentData) {\r\n        throw new Error(\"Student not found\");\r\n      }\r\n\r\n      // 2. Format data for Gemini API\r\n      const formattedData = {\r\n        name: studentData.name,\r\n        studentId: studentData.studentId,\r\n        grade: studentData.grade,\r\n        subjects: studentData.subjects.map((subject) => ({\r\n          name: subject.name,\r\n          performance: subject.performance || \"Not specified\",\r\n          grades: subject.grades.map((grade) => grade.value),\r\n          average: subject.grades.length\r\n            ? subject.grades.reduce((sum, grade) => sum + grade.value, 0) /\r\n              subject.grades.length\r\n            : \"No grades recorded\",\r\n        })),\r\n        attendance: studentData.attendance\r\n          ? {\r\n              present: studentData.attendance.present,\r\n              absent: studentData.attendance.absent,\r\n              late: studentData.attendance.late,\r\n              attendanceRate:\r\n                studentData.attendance.present /\r\n                (studentData.attendance.present +\r\n                  studentData.attendance.absent +\r\n                  studentData.attendance.late),\r\n            }\r\n          : \"No attendance records\",\r\n        behavioralNotes: studentData.behavioralNotes.map((note) => note.content),\r\n      };\r\n\r\n      // 3. Call Gemini API service\r\n      const feedback = await generateFeedback(formattedData, input.feedbackType);\r\n\r\n      // 4. Save feedback to database\r\n      const savedFeedback = await ctx.db.feedback.create({\r\n        data: {\r\n          content: feedback,\r\n          generatedBy: \"Gemini API\",\r\n          student: {\r\n            connect: { id: input.studentId },\r\n          },\r\n        },\r\n      });\r\n\r\n      return savedFeedback;\r\n    }),\r\n\r\n  // Get feedback history for a student\r\n  getFeedbackHistory: protectedProcedure\r\n    .input(z.object({ studentId: z.string() }))\r\n    .query(async ({ ctx, input }) => {\r\n      return await ctx.db.feedback.findMany({\r\n        where: { studentId: input.studentId },\r\n        orderBy: { date: \"desc\" },\r\n      });\r\n    }),\r\n});"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,iBAAiB,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC7C,qCAAqC;IACrC,kBAAkB,4HAAA,CAAA,qBAAkB,CACjC,KAAK,CACJ,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM;QACnB,cAAc,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YACnB;YACA;YACA;SACD;IACH,IAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,sBAAsB;QACtB,MAAM,cAAc,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC;YAClD,OAAO;gBAAE,IAAI,MAAM,SAAS;YAAC;YAC7B,SAAS;gBACP,UAAU;oBACR,SAAS;wBACP,QAAQ;oBACV;gBACF;gBACA,YAAY;gBACZ,iBAAiB;YACnB;QACF;QAEA,IAAI,CAAC,aAAa;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,gCAAgC;QAChC,MAAM,gBAAgB;YACpB,MAAM,YAAY,IAAI;YACtB,WAAW,YAAY,SAAS;YAChC,OAAO,YAAY,KAAK;YACxB,UAAU,YAAY,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAY,CAAC;oBAC/C,MAAM,QAAQ,IAAI;oBAClB,aAAa,QAAQ,WAAW,IAAI;oBACpC,QAAQ,QAAQ,MAAM,CAAC,GAAG,CAAC,CAAC,QAAU,MAAM,KAAK;oBACjD,SAAS,QAAQ,MAAM,CAAC,MAAM,GAC1B,QAAQ,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,KAAK,EAAE,KACzD,QAAQ,MAAM,CAAC,MAAM,GACrB;gBACN,CAAC;YACD,YAAY,YAAY,UAAU,GAC9B;gBACE,SAAS,YAAY,UAAU,CAAC,OAAO;gBACvC,QAAQ,YAAY,UAAU,CAAC,MAAM;gBACrC,MAAM,YAAY,UAAU,CAAC,IAAI;gBACjC,gBACE,YAAY,UAAU,CAAC,OAAO,GAC9B,CAAC,YAAY,UAAU,CAAC,OAAO,GAC7B,YAAY,UAAU,CAAC,MAAM,GAC7B,YAAY,UAAU,CAAC,IAAI;YACjC,IACA;YACJ,iBAAiB,YAAY,eAAe,CAAC,GAAG,CAAC,CAAC,OAAS,KAAK,OAAO;QACzE;QAEA,6BAA6B;QAC7B,MAAM,WAAW,MAAM,CAAA,GAAA,6HAAA,CAAA,mBAAgB,AAAD,EAAE,eAAe,MAAM,YAAY;QAEzE,+BAA+B;QAC/B,MAAM,gBAAgB,MAAM,IAAI,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;YACjD,MAAM;gBACJ,SAAS;gBACT,aAAa;gBACb,SAAS;oBACP,SAAS;wBAAE,IAAI,MAAM,SAAS;oBAAC;gBACjC;YACF;QACF;QAEA,OAAO;IACT;IAEF,qCAAqC;IACrC,oBAAoB,4HAAA,CAAA,qBAAkB,CACnC,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IACvC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC1B,OAAO,MAAM,IAAI,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;YACpC,OAAO;gBAAE,WAAW,MAAM,SAAS;YAAC;YACpC,SAAS;gBAAE,MAAM;YAAO;QAC1B;IACF;AACJ","debugId":null}},
    {"offset": {"line": 756, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport {\n  createTRPCRouter,\n  protectedProcedure,\n  publicProcedure,\n} from \"~/server/api/trpc\";\n\nexport const postRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n\n  create: protectedProcedure\n    .input(z.object({ name: z.string().min(1) }))\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.post.create({\n        data: {\n          name: input.name,\n          createdBy: { connect: { id: ctx.session.user.id } },\n        },\n      });\n    }),\n\n  getLatest: protectedProcedure.query(async ({ ctx }) => {\n    const post = await ctx.db.post.findFirst({\n      orderBy: { createdAt: \"desc\" },\n      where: { createdBy: { id: ctx.session.user.id } },\n    });\n\n    return post ?? null;\n  }),\n\n  getSecretMessage: protectedProcedure.query(() => {\n    return \"you can now see this secret message!\";\n  }),\n});\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAMO,MAAM,aAAa,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,OAAO,4HAAA,CAAA,kBAAe,CACnB,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE;QACjC;IACF;IAEF,QAAQ,4HAAA,CAAA,qBAAkB,CACvB,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAAG,IACzC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,MAAM;gBACJ,MAAM,MAAM,IAAI;gBAChB,WAAW;oBAAE,SAAS;wBAAE,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;oBAAC;gBAAE;YACpD;QACF;IACF;IAEF,WAAW,4HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAChD,MAAM,OAAO,MAAM,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,SAAS;gBAAE,WAAW;YAAO;YAC7B,OAAO;gBAAE,WAAW;oBAAE,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;gBAAC;YAAE;QAClD;QAEA,OAAO,QAAQ;IACjB;IAEA,kBAAkB,4HAAA,CAAA,qBAAkB,CAAC,KAAK,CAAC;QACzC,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 808, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/server/api/root.ts"],"sourcesContent":["import { createTRPCRouter } from \"~/server/api/trpc\";\nimport { studentRouter } from \"~/server/api/routers/student\";\nimport { feedbackRouter } from \"~/server/api/routers/feedback\";\nimport { postRouter } from \"~/server/api/routers/post\"; // Other existing routers\n\nexport const appRouter = createTRPCRouter({\n  student: studentRouter,\n  feedback: feedbackRouter,\n  post: postRouter,\n  // Add other routers here\n});\n\nexport const createCaller = appRouter.createCaller;\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA,0OAAwD,yBAAyB;;;;;AAE1E,MAAM,YAAY,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,SAAS,0IAAA,CAAA,gBAAa;IACtB,UAAU,2IAAA,CAAA,iBAAc;IACxB,MAAM,uIAAA,CAAA,aAAU;AAElB;AAEO,MAAM,eAAe,UAAU,YAAY","debugId":null}},
    {"offset": {"line": 832, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/trpc/query-client.ts"],"sourcesContent":["import {\n  defaultShouldDehydrateQuery,\n  QueryClient,\n} from \"@tanstack/react-query\";\nimport SuperJSON from \"superjson\";\n\nexport const createQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        // With SSR, we usually want to set some default staleTime\n        // above 0 to avoid refetching immediately on the client\n        staleTime: 30 * 1000,\n      },\n      dehydrate: {\n        serializeData: SuperJSON.serialize,\n        shouldDehydrateQuery: (query) =>\n          defaultShouldDehydrateQuery(query) ||\n          query.state.status === \"pending\",\n      },\n      hydrate: {\n        deserializeData: SuperJSON.deserialize,\n      },\n    },\n  });\n"],"names":[],"mappings":";;;AAAA;AAAA;AAIA;;;AAEO,MAAM,oBAAoB,IAC/B,IAAI,6KAAA,CAAA,cAAW,CAAC;QACd,gBAAgB;YACd,SAAS;gBACP,0DAA0D;gBAC1D,wDAAwD;gBACxD,WAAW,KAAK;YAClB;YACA,WAAW;gBACT,eAAe,0IAAA,CAAA,UAAS,CAAC,SAAS;gBAClC,sBAAsB,CAAC,QACrB,CAAA,GAAA,2KAAA,CAAA,8BAA2B,AAAD,EAAE,UAC5B,MAAM,KAAK,CAAC,MAAM,KAAK;YAC3B;YACA,SAAS;gBACP,iBAAiB,0IAAA,CAAA,UAAS,CAAC,WAAW;YACxC;QACF;IACF","debugId":null}},
    {"offset": {"line": 862, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/trpc/server.ts"],"sourcesContent":["import \"server-only\";\n\nimport { createHydrationHelpers } from \"@trpc/react-query/rsc\";\nimport { headers } from \"next/headers\";\nimport { cache } from \"react\";\n\nimport { createCaller, type AppRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\nimport { createQueryClient } from \"./query-client\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a tRPC call from a React Server Component.\n */\nconst createContext = cache(async () => {\n  const heads = new Headers(await headers());\n  heads.set(\"x-trpc-source\", \"rsc\");\n\n  return createTRPCContext({\n    headers: heads,\n  });\n});\n\nconst getQueryClient = cache(createQueryClient);\nconst caller = createCaller(createContext);\n\nexport const { trpc: api, HydrateClient } = createHydrationHelpers<AppRouter>(\n  caller,\n  getQueryClient\n);\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE;IAC1B,MAAM,QAAQ,IAAI,QAAQ,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IACtC,MAAM,GAAG,CAAC,iBAAiB;IAE3B,OAAO,CAAA,GAAA,4HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS;IACX;AACF;AAEA,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE,8HAAA,CAAA,oBAAiB;AAC9C,MAAM,SAAS,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD,EAAE;AAErB,MAAM,EAAE,MAAM,GAAG,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,wJAAA,CAAA,yBAAsB,AAAD,EAC/D,QACA","debugId":null}},
    {"offset": {"line": 899, "column": 0}, "map": {"version":3,"sources":["file://D%3A/VSCODE/student-feedback-app/student-feedback-app/src/app/page.tsx"],"sourcesContent":["import Link from \"next/link\";\n\nimport { LatestPost } from \"~/app/_components/post\";\nimport { auth } from \"~/server/auth\";\nimport { api, HydrateClient } from \"~/trpc/server\";\n\nexport default async function Home() {\n  const hello = await api.post.hello({ text: \"from tRPC\" });\n  const session = await auth();\n\n  if (session?.user) {\n    void api.post.getLatest.prefetch();\n  }\n\n  return (\n    <HydrateClient>\n      <main className=\"flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white\">\n        <div className=\"container flex flex-col items-center justify-center gap-12 px-4 py-16\">\n          <h1 className=\"text-5xl font-extrabold tracking-tight sm:text-[5rem]\">\n            Create <span className=\"text-[hsl(280,100%,70%)]\">T3</span> App\n          </h1>\n          <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8\">\n            <Link\n              className=\"flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 hover:bg-white/20\"\n              href=\"https://create.t3.gg/en/usage/first-steps\"\n              target=\"_blank\"\n            >\n              <h3 className=\"text-2xl font-bold\">First Steps →</h3>\n              <div className=\"text-lg\">\n                Just the basics - Everything you need to know to set up your\n                database and authentication.\n              </div>\n            </Link>\n            <Link\n              className=\"flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 hover:bg-white/20\"\n              href=\"https://create.t3.gg/en/introduction\"\n              target=\"_blank\"\n            >\n              <h3 className=\"text-2xl font-bold\">Documentation →</h3>\n              <div className=\"text-lg\">\n                Learn more about Create T3 App, the libraries it uses, and how\n                to deploy it.\n              </div>\n            </Link>\n          </div>\n          <div className=\"flex flex-col items-center gap-2\">\n            <p className=\"text-2xl text-white\">\n              {hello ? hello.greeting : \"Loading tRPC query...\"}\n            </p>\n\n            <div className=\"flex flex-col items-center justify-center gap-4\">\n              <p className=\"text-center text-2xl text-white\">\n                {session && <span>Logged in as {session.user?.name}</span>}\n              </p>\n              <Link\n                href={session ? \"/api/auth/signout\" : \"/api/auth/signin\"}\n                className=\"rounded-full bg-white/10 px-10 py-3 font-semibold no-underline transition hover:bg-white/20\"\n              >\n                {session ? \"Sign out\" : \"Sign in\"}\n              </Link>\n            </div>\n          </div>\n\n          {session?.user && <LatestPost />}\n        </div>\n      </main>\n    </HydrateClient>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;AAEe,eAAe;IAC5B,MAAM,QAAQ,MAAM,qHAAA,CAAA,MAAG,CAAC,IAAI,CAAC,KAAK,CAAC;QAAE,MAAM;IAAY;IACvD,MAAM,UAAU,MAAM,CAAA,GAAA,8HAAA,CAAA,OAAI,AAAD;IAEzB,IAAI,SAAS,MAAM;QACjB,KAAK,qHAAA,CAAA,MAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ;IAClC;IAEA,qBACE,8OAAC,qHAAA,CAAA,gBAAa;kBACZ,cAAA,8OAAC;YAAK,WAAU;sBACd,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;;4BAAwD;0CAC7D,8OAAC;gCAAK,WAAU;0CAA2B;;;;;;4BAAS;;;;;;;kCAE7D,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,4JAAA,CAAA,UAAI;gCACH,WAAU;gCACV,MAAK;gCACL,QAAO;;kDAEP,8OAAC;wCAAG,WAAU;kDAAqB;;;;;;kDACnC,8OAAC;wCAAI,WAAU;kDAAU;;;;;;;;;;;;0CAK3B,8OAAC,4JAAA,CAAA,UAAI;gCACH,WAAU;gCACV,MAAK;gCACL,QAAO;;kDAEP,8OAAC;wCAAG,WAAU;kDAAqB;;;;;;kDACnC,8OAAC;wCAAI,WAAU;kDAAU;;;;;;;;;;;;;;;;;;kCAM7B,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAE,WAAU;0CACV,QAAQ,MAAM,QAAQ,GAAG;;;;;;0CAG5B,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAE,WAAU;kDACV,yBAAW,8OAAC;;gDAAK;gDAAc,QAAQ,IAAI,EAAE;;;;;;;;;;;;kDAEhD,8OAAC,4JAAA,CAAA,UAAI;wCACH,MAAM,UAAU,sBAAsB;wCACtC,WAAU;kDAET,UAAU,aAAa;;;;;;;;;;;;;;;;;;oBAK7B,SAAS,sBAAQ,8OAAC,kIAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;;;;;AAKvC","debugId":null}}]
}